@use "sass:math";
@use "sass:map";
@use "sass:list";

@use "mixins";
@forward "mixins";

// variables: expose properties and values that we want to easily contol or reuse

$primary: #49240f;
$secondary: #e4a79d;
$light-grey: #cdcdcd;

$ratios: (
  //just interval ratios
  "minorSecond": 1.067,
  "majorSecond": 1.125,
  "minorThird": 1.2,
  "majorThird": 1.25,
  "perfectFourth": 1.333,
  "augmentedFourth": 1.414,
  "perfectFifth": 1.5,
  "minorSixth": 1.6,
  "majorSixth": 1.666,
  "minorSeventh": 1.8,
  "majorSeventh": 1.875,
  "octave": 2,
  // other
  "golden": 1.618
);

@function ratio($index) {
  @return list.nth(list.nth($ratios, $index), 2);
}

// Difference in size from one level to the next
$typeScale-factor: ratio(4);
// The size of a <p> tag in the type scale
$typeScale-base: 1em;
// Levels in the type scale, in order from smallest to largest
$typeScale-levels: "xxsmall", "xsmall", "small", "p", "subtitle", "h3", "h2",
  "h1", "large", "xlarge", "xxlarge";
// Eventually houses typescale tokens
$typeScale: ();

// @each $level in $typeScale-levels {
// 	// map-set($level, 'test');
// 	// @debug $level;
// 	$typeScale: map.set($level);
// }

$breakpoints: (
  "min": 320,
  "max": 640,
);

@mixin resetButtonStyles {
  appearance: none;
  border: 0;
  background: none;
  padding: 0;
}

// Some dimensions should be multiples of a specific base unit. This funciton returns a dimension based on a given multiple of units
@function u($size) {
  $sizes: (
    "0.125": 0.125rem,
    "0.25": 0.25rem,
    "0.5": 0.5rem,
    "0.75": 0.75rem,
    "1": 1rem,
    "1.25": 1.25rem,
    "1.5": 1.5rem,
    "1.75": 1.75rem,
    "2": 2rem,
    "2.25": 2.25rem,
    "2.5": 2.5rem,
    "3": 3rem,
    "3.25": 3.25rem,
    "3.5": 3.5rem,
    "4": 4rem,
    "4.5": 4.5rem,
    "5": 5rem,
    "6": 6rem,
    "7": 7rem,
  );

  // TODO: add warning when size is not in map

  // @return utils.checkAndGet($sizes, #{$size});
  @return map.get($sizes, #{$size});
}

@function stripUnits() {
}

@function getTypeScalePixelSize($level: 0) {
  @return math.pow($typeScale-factor, $level) * $typeScale-base;
}

// Append typeScale pixel sizes to typeScale map
@for $i from 1 to length($typeScale-levels) + 1 {
  $typeScale-name: list.nth($typeScale-levels, $i);
  $p-index: list.index($typeScale-levels, "p");
  $typeScale-index-relativeToP: ($i - $p-index);
  $typeScale-pixelSize: getTypeScalePixelSize($typeScale-index-relativeToP);

  $typeScale: map.merge(
    $typeScale,
    (
      $typeScale-name: $typeScale-pixelSize,
    )
  );
}

$font-family: (
  // 'newsreader': ('Newsreader', serif),
  // 'manrope': ('Manrope', sans-serif),
  "monospace": ("Space Mono", sans-serif),
  "sans-serif": ("Space Grotesk", sans-serif),
  "serif": ("Newsreader", serif)
);

$h1: (
  "font-family": map.get($font-family, "sans-serif"),
  "font-size": map.get($typeScale, "h1"),
  "font-style": normal,
  "font-weight": 600,
  "line-height": ratio(5) + em,
  "margin": 0 0 ratio(6) + rem,
);

$h2: (
  "font-family": map.get($font-family, "sans-serif"),
  "font-size": map.get($typeScale, "h2"),
  "font-style": normal,
  "font-weight": 600,
  "line-height": ratio(4) + em,
  "margin": "initial",
);

$h3: (
  "font-family": map-get($font-family, "sans-serif"),
  "font-size": map.get($typeScale, "h3"),
  "font-style": italic,
  "font-weight": 200,
  "line-height": 1em,
  "margin": "initial",
);

$p: (
  "font-family": map-get($font-family, "serif"),
  "font-size": map.get($typeScale, "p"),
  "font-weight": 200,
  "line-height": 1.618em,
  "margin": 0 0 1rem,
);

$monospace: (
  "font-family": map-get($font-family, "sans-serif"),
  "font-weight": 600,
  "letter-spacing": 0.25em,
  "text-transform": uppercase,
);

@mixin monospace {
  font-family: map.get($monospace, "font-family");
  font-weight: map.get($monospace, "font-weight");
  letter-spacing: map.get($monospace, "letter-spacing");
  text-transform: map.get($monospace, "text-transform");
}
