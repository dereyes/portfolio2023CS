@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:string";

@use "collection";
@use "convert";
@use "layout" as *;
@use "ratio";
@use "u" as *;

$remInPx: 24px;

// Given a start font size and a start/end screen width, returns a 'font-size' value where the text is the start size at the start width, scales linearly between widths, and stops scaling at the end width
@function getFluidFontSize(
  $startFontSizeInRem,
  $startScreenWidthInPx,
  $endScreenWidthInPx
) {
  $startFontSizeInPx: convert.stripUnits($startFontSizeInRem) * $remInPx;
  $fontSizeToScreenSizeRatio: math.div(
    $startFontSizeInPx,
    $startScreenWidthInPx
  );
  $startFontSizeInVw: $fontSizeToScreenSizeRatio * 100vw;

  $endFontSizeInPxUnitless: convert.stripUnits($endScreenWidthInPx) *
    $fontSizeToScreenSizeRatio;
  $remInPxUnitless: convert.stripUnits($remInPx);
  $endFontSizeInRems: math.div($endFontSizeInPxUnitless, $remInPxUnitless) *
    1rem;

  @return clamp($startFontSizeInRem, $startFontSizeInVw, $endFontSizeInRems);
}

// Calculates the size of a level in a typescale succession
@function _getTypescalePixelSize($level: 0, $typescale-base, $typescale-ratio) {
  @return math.pow($typescale-ratio, $level) * $typescale-base;
}

@function getFluidTypescale($startBreakpoint, $endBreakpoint, $base, $ratio) {
  // Difference in size from one level to the next
  $ratio: $ratio;
  // The size of a <p> tag in the type scale
  $base: $base;
  // Levels in the typescale, from smallest to largest
  $levels: "small", "p", "", "h3", "h2", "h1";
  $levels-pIndex: list.index($levels, "p");
  // Eventually houses typescale values
  $typescale: ();

  @for $i from 1 to length($levels) + 1 {
    $level-name: list.nth($levels, $i);
    $level-indexRelativeToP: ($i - $levels-pIndex);
    $level-pixelSize: _getTypescalePixelSize(
      $level-indexRelativeToP,
      $base,
      $ratio
    );

    $level-fluidFontSize: getFluidFontSize(
      $level-pixelSize,
      getBreakpoint($startBreakpoint),
      getBreakpoint($endBreakpoint) - 1,
      // -1 to prevent media query overlap
    );

    $typescale: map.merge(
      $typescale,
      (
        $level-name: $level-fluidFontSize,
        // For non-fluid typescale, use $level-pixelSize here instead
      )
    );
  }

  @return $typescale;
}

@function fluidTypescale($screenSize, $level) {
  $typescales: (
    "tablet":
      getFluidTypescale("phone", "tablet", 0.75rem, ratio.justInterval(3)),
    "desktop":
      getFluidTypescale("laptop", "desktop", 0.75rem, ratio.justInterval(4)),
  );

  @return collection.get(collection.get($typescales, $screenSize), $level);
}

@function fontFamily($family) {
  $families: (
    "sansSerif": string.unquote("'Manrope', sans-serif"),
  );

  @return collection.get($families, #{$family});
}

@function fontWeight($weight) {
  $weights: (
    "regular": 400,
    "medium": 500,
    "semibold": 600,
    "bold": 700,
    "extrabold": 800,
  );

  @return collection.get($weights, #{$weight});
}

.noWrap {
  white-space: nowrap;
}
