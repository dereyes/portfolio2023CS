@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:string";

@use "collection";
@use "convert";
@use "layout" as *;
@use "ratio";
@use "u" as *;

$remInPx: 24px;

// Given a start font size and a start/end screen width, returns a 'font-size' value where the text is the start size at the start width, scales linearly between widths, and stops scaling at the end width
@function getFluidFontSize(
  $startFontSizeInRem,
  $startScreenWidthInPx,
  $endScreenWidthInPx
) {
  $startFontSizeInPx: convert.stripUnits($startFontSizeInRem) * $remInPx;
  $fontSizeToScreenSizeRatio: math.div($startFontSizeInPx, $startScreenWidthInPx);
  $startFontSizeInVw: $fontSizeToScreenSizeRatio * 100vw;

  $endFontSizeInPxUnitless: convert.stripUnits($endScreenWidthInPx) * $fontSizeToScreenSizeRatio;
  $remInPxUnitless: convert.stripUnits($remInPx);
  $endFontSizeInRems: math.div($endFontSizeInPxUnitless, $remInPxUnitless) * 1rem;

  @return clamp($startFontSizeInRem, $startFontSizeInVw, $endFontSizeInRems);
}

@function _getTypescalePixelSize(
  $level: 0,
  $typescale-base,
  $typescale-factor
) {
  @return math.pow($typescale-factor, $level) * $typescale-base;
}

// Creates a succession of font sizes which are proportional to each other, returns the requested level in the succession
@function typescale($level) {
  // Difference in size from one level to the next
  $typescale-factor: ratio.justInterval(6);
  // The size of a <p> tag in the type scale
  $typescale-base: 1rem;
  // Levels in the type scale, from smallest to largest
  $typescale-levels: "small", "p", "", "h3", "h2", "h1";
  // Eventually houses typescale values
  $typescale: ();

  @for $i from 1 to length($typescale-levels) + 1 {
    $typescale-name: list.nth($typescale-levels, $i);
    $typescale-p-index: list.index($typescale-levels, "p");
    $typescale-index-relativeToP: ($i - $typescale-p-index);
    $typescale-pixelSize: _getTypescalePixelSize(
      $typescale-index-relativeToP,
      $typescale-base,
      $typescale-factor
    );

    $typescale: map.merge(
      $typescale,
      (
        $typescale-name: $typescale-pixelSize,
      )
    );
  }

  @return collection.get($typescale, #{$level});
}

@function fontFamily($family) {
  $families: (
    "sansSerif": string.unquote("'Manrope', sans-serif"),
  );

  @return collection.get($families, #{$family});
}

@function fontWeight($weight) {
  $weights: (
    "regular": 400,
    "medium": 500,
    "semibold": 600,
    "bold": 700,
    "extrabold": 800,
  );

  @return collection.get($weights, #{$weight});
}

.noWrap {
  white-space: nowrap;
}
